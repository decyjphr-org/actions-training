# This is a basic workflow to help you get started with Actions

name: Test Checks

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Check if PR is mergeable 
        id: isMergeable
        uses: actions/github-script@v5
        with:
          GITHUB-TOKEN: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const org = context.payload.organization.login
            const repo = context.payload.repository.name
            console.log(JSON.stringify(context))
            const params = {
                  org,
                  repo,
                  pull_number: context.pullrequest.number
                }
                let res = {
                    data: {
                      name: ''
                    }
                }
                try {
                    res = await github.rest.pulls.get(params)
                } catch (e) {
                    if (e.status === 404) {
                        const message404 = `No PR found for ${JSON.stringify(params)}`
                        core.debug(message404)
                        core.setOutput('status', message404)
                        core.setFailed(`${message404}`)
                        throw new Error(message404)
                    }
                    const message = `${e} fetching the team with ${JSON.stringify(params)}`
                    core.debug(message)
                    core.setOutput('status', message)
                    core.setFailed(`${message}`)
                    throw new Error(message)
                }
